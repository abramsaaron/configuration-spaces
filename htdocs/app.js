"use strict";let graph;let graphs={};let graphicsForGraph,graphicsForConfigurationSpace;let configuration_space,configuration_spaceLayout;let cameraState,areWeOnTheLeft;let font;let infoStrings;let chooseFile;let easyCamActive=true;let temperature=1;let cold=.001;let coolingRate=0;let viewingStyle="single";let gui;let parameters={};let customGraph;let infoDiv;let infoString;let verbose=!true;let running=true;let takeScreenshotGraph=!true;let takeScreenshotConfigSpace=!true;let forcesActive=true;let robotAmoving=true;let robotBmoving=true;let addSingleNodeMode=false;let nodeSelectedForEdgeAddition;let deleteNodeMode=false;function preload(){font=loadFont("fonts/Myriad_Pro_6809.otf")}function setup(){noCanvas();setAttributes("antialias",true);infoDiv=select("#info");infoDiv.hide();chooseFile=createFileInput(handleFile);chooseFile.parent("inputDiv");initParameters();setParametersFromURL();init()}function resetCanvases(){if(graphicsForGraph!==undefined){graphicsForGraph.remove()}if(graphicsForConfigurationSpace!==undefined){graphicsForConfigurationSpace.remove()}}function initgraphicsForGraph(w,h){graphicsForGraph=createGraphics(w,h,WEBGL);graphicsForGraph.smooth();graphicsForGraph.parent("graph");graphicsForGraph.pixelDensity(2);graphicsForGraph.show();setupEasyCam(graphicsForGraph,500);addScreenPositionFunction(graphicsForGraph);if(verbose)console.log(graphicsForGraph);graphicsForGraph.canvas.addEventListener("click",mousePressedOnLeft)}function initgraphicsForConfigurationSpace(w,h){graphicsForConfigurationSpace=createGraphics(w,h,WEBGL);graphicsForConfigurationSpace.smooth();graphicsForConfigurationSpace.parent("configspace");graphicsForConfigurationSpace.pixelDensity(2);graphicsForConfigurationSpace.show();let gl=graphicsForConfigurationSpace.canvas.getContext("webgl");gl.disable(gl.DEPTH_TEST);setupEasyCam(graphicsForConfigurationSpace,500);addScreenPositionFunction(graphicsForConfigurationSpace)}function init(){initView(viewingStyle);initGraph(parameters.graphType);initGUI()}function updateMode(){switch(parameters.mode){case"View":easyCamOn();deleteNodeMode=false;break;case"Move":easyCamOff();deleteNodeMode=false;break;case"Edit":easyCamOff();break}}function toggleView(){if(viewingStyle==="dual"){viewingStyle="single"}else if(viewingStyle==="single"){viewingStyle="dual"}init()}function initView(style){viewingStyle=style;resetCanvases();if(style==="single"){initgraphicsForGraph(0,windowHeight);initgraphicsForConfigurationSpace(windowWidth,windowHeight)}else if(viewingStyle==="dual"){initgraphicsForGraph(windowWidth/2,windowHeight);initgraphicsForConfigurationSpace(windowWidth/2,windowHeight)}if(parameters.lights){let ambientBrightness=180;let directionalBrightness=180;graphicsForGraph.ambientLight(ambientBrightness,ambientBrightness,ambientBrightness);graphicsForGraph.directionalLight(directionalBrightness,directionalBrightness,directionalBrightness,-1,0,0);graphicsForConfigurationSpace.ambientLight(ambientBrightness,ambientBrightness,ambientBrightness);graphicsForConfigurationSpace.directionalLight(directionalBrightness,directionalBrightness,directionalBrightness,-1,0,0)}}function initParameters(){parameters.graphType="K(2,3)";parameters.mode="View";parameters.showGraph=true;parameters.showConfigurationspace=true;parameters.showInfo=!true;parameters.showRobots=true;parameters.syncView=true;parameters.distinguishDots=!true;parameters.gridOn=!true;parameters.squareOn=true;parameters.showHyperplanes=true;parameters.granularityFirstCoordinate=10;parameters.granularitySecondCoordinate=10;parameters.showText=!true;parameters.sphereView=true;parameters.lights=true;parameters.moveDotsRandomly=!true;parameters.robotASpeed=.1;parameters.robotBSpeed=.1;parameters.amountMultiplier=.05;parameters.recordHistory=!true;parameters.showHistory=!true;parameters.sphereDetail=30;parameters.resetHistory=function(){configuration_space.graphLayout.configuration.resetHistory()};parameters.speedUp=1;parameters.labelX=0;parameters.labelY=0;parameters.labelZ=20;parameters.colorRobotA=[220,0,0];parameters.colorRobotB=[60,60,60];parameters.colorConfig=[31,108,179];parameters.colorNode=[180,180,180];parameters.colorGraphEdge=[31,108,179];parameters.squareColor=[0,0,0];parameters.squareOpacity=100;parameters.activeDotColor=[220,110,0];parameters.deleteNodeColor=[100,0,200];parameters.selectedNodeForEdgeColor=[45,80,200];parameters.nodeSize=20;parameters.robotsNodeSize=21;parameters.configNodeSize=21;parameters.edgeWidthGraph=4.5;parameters.edgeWidthConfigSpace=2;parameters.edgeWidthGrid=.4}function initGUI(){const pane=new Tweakpane;pane.addInput(parameters,"showInfo").on("change",(e=>{if(e.value){infoDiv.show()}else{infoDiv.hide()}}));pane.addInput(parameters,"graphType",{options:{"K(1,1)":"K(1,1)","K(1,2)":"K(1,2)","K(1,3)":"K(1,3)"}}).on("change",(e=>{parameters.mode="View";updateMode();init()}));if(gui!==undefined)gui.destroy();gui=new dat.GUI({autoPlace:false,width:400});let globalUI=gui.addFolder("Settings");let graphPicker=globalUI.add(parameters,"graphType",["C(20)","K(1,1)","K(1,2)","K(1,3)","K(1,4)","K(1,5)","K(1,6)","K(1,7)","K(1,8)","K(1,9)","K(1,10)","K(2,2)","K(2,3)","K(2,4)","K(2,5)","K(2,6)","K(3,3)","K(3,4)","K(4,4)","K(2)","K(3)","K(4)","K(5)","K(6)","K(7)","K(8)","C(2)","C(3)","C(4)","C(5)","C(6)","C(7)","W(4)","W(5)","W(6)","W(7)","W(8)","W(9)","W(10)","custom"]).name("Choose graph").listen();graphPicker.onChange((function(value){parameters.mode="View";updateMode();init()}));let modePicker=globalUI.add(parameters,"mode",["View","Move","Edit"]).name("Choose mode").listen();modePicker.onChange((function(value){updateMode()}));let showGraphToggle=globalUI.add(parameters,"showGraph").name("Show graph");showGraphToggle.onChange((function(value){updateURL()}));let showConfigurationspaceToggle=globalUI.add(parameters,"showConfigurationspace").name("Show configuration space");showConfigurationspaceToggle.onChange((function(value){updateURL()}));let showRobotsToggle=globalUI.add(parameters,"showRobots").name("Show robots");showRobotsToggle.onChange((function(value){updateURL()}));let showInfoToggle=globalUI.add(parameters,"showInfo").name("Show info");showInfoToggle.onChange((function(value){if(value){infoDiv.show()}else{infoDiv.hide()}}));if(viewingStyle==="dual"){globalUI.add(parameters,"syncView").name("Sync views")}let visualGUI=gui.addFolder("Visual Parameters");visualGUI.add(parameters,"showText").name("Show text");visualGUI.add(parameters,"nodeSize",0,40).name("Node size");visualGUI.add(parameters,"sphereView").name("Show spheres");visualGUI.add(parameters,"sphereDetail",1,60).step(1).name("Sphere detail");let lightsChange=visualGUI.add(parameters,"lights").name("Use lights (resets!)");lightsChange.onFinishChange((function(value){init()}));visualGUI.addColor(parameters,"colorNode").name("Node color");visualGUI.add(parameters,"labelX",-100,100).step(1).name("Label: X offset");visualGUI.add(parameters,"labelY",-100,100).step(1).name("Label: Y offset");visualGUI.add(parameters,"labelZ",-100,100).step(1).name("Label: Z offset");let motionGUI=gui.addFolder("Motion");motionGUI.add(parameters,"moveDotsRandomly").name("Move robots");motionGUI.add(parameters,"amountMultiplier",0,1).step(.001).name("Robot speed multiplier");motionGUI.add(parameters,"robotASpeed",0,1).step(.001).name("Robot A speed");motionGUI.add(parameters,"robotBSpeed",0,1).step(.001).name("Robot B speed");motionGUI.add(parameters,"speedUp",0,1e3).name("Drawing speed-up");motionGUI.add(parameters,"recordHistory").name("Record configuration history");motionGUI.add(parameters,"showHistory").name("Show configuration history ");motionGUI.add(parameters,"resetHistory").name("Reset configuration history");let visualGUIGraph=gui.addFolder("Visuals for graph");visualGUIGraph.add(parameters,"robotsNodeSize",0,40).name("Node size for robots");visualGUIGraph.add(parameters,"edgeWidthGraph",0,10).name("Edge width in graph");visualGUIGraph.addColor(parameters,"colorRobotA").name("Robot A color");visualGUIGraph.addColor(parameters,"colorRobotB").name("Robot B color");visualGUIGraph.addColor(parameters,"colorGraphEdge").name("Edge color");let visualGUISpace=gui.addFolder("Visuals for config space");visualGUISpace.add(parameters,"configNodeSize",0,40).name("Node size for configurations");visualGUISpace.add(parameters,"edgeWidthConfigSpace",0,10).name("Edge width in space");visualGUISpace.add(parameters,"edgeWidthGrid",0,10).name("Edge width for square grid");visualGUISpace.add(parameters,"gridOn").name("Show square grid");visualGUISpace.add(parameters,"squareOn").name("Show square surface");visualGUISpace.add(parameters,"showHyperplanes").name("Show hyperplanes");visualGUISpace.add(parameters,"granularityFirstCoordinate",0,80).step(1).name("Granularity for 1. coordinate");visualGUISpace.add(parameters,"granularitySecondCoordinate",0,80).step(1).name("Granularity for 2. coordinate");visualGUISpace.addColor(parameters,"squareColor").name("Square surface color");visualGUISpace.add(parameters,"squareOpacity",0,255).name("Square surface opacity");visualGUISpace.addColor(parameters,"colorConfig").name("Configuration color");let graphGUI=gui.addFolder("Graph Parameters");graphGUI.add(graph.graphLayout,"edgelength",0,400).name("Target edge length");graphGUI.add(graph.graphLayout,"graphEdgeForce",0,.1).name("Edge force");graphGUI.add(graph.graphLayout,"maxspeed",0,1e3).name("Max node speed");graphGUI.add(graph.graphLayout,"cohesionthreshold",0,2).name("Neighbor attraction threshold");graphGUI.add(graph.graphLayout,"repulsion",0,1e5).name("Repulsion");graphGUI.add(graph.graphLayout,"separationFactor",0,3).name("Separation factor");graphGUI.add(graph.graphLayout,"planarForce",0,.15).name("Planar force").listen();graphGUI.add(graph.graphLayout,"centerForce",0,.15).name("Center force").listen();graphGUI.add(graph.graphLayout,"extraCenterForce",0,.15).name("Extra center force");graphGUI.add(graph.graphLayout,"moveToCenter").name("Adjust to center");let configGUI=gui.addFolder("Configuration Space Parameters");configGUI.add(configuration_space.graphLayout,"firstCoordinateEdgeLength",1,1e3).name("First coordinate target edge length");configGUI.add(configuration_space.graphLayout,"firstCoordinateForce",0,.1).name("force for First coordinate edge");configGUI.add(configuration_space.graphLayout,"secondCoordinateEdgeLength",1,1e3).name("Second coordinate target edge length");configGUI.add(configuration_space.graphLayout,"secondCoordinateForce",0,.1).name("force for Second coordinate edge");configGUI.add(configuration_space.graphLayout,"firstCoordinateMirrorEdgeLength",1,1e3).name("First coordinate mirror target edge length");configGUI.add(configuration_space.graphLayout,"firstCoordinateMirrorForce",0,.1).name("force for First coordinate mirror edge");configGUI.add(configuration_space.graphLayout,"secondCoordinateMirrorEdgeLength",1,1e3).name("Second coordinate mirror target edge length");configGUI.add(configuration_space.graphLayout,"secondCoordinateMirrorForce",0,.1).name("force for Second coordinate mirror edge");configGUI.add(configuration_space.graphLayout,"coordinatePreference",-.1,.1).name("coordinatePreference");configGUI.add(configuration_space.graphLayout,"extraCenterPreference",0,.1).name("extraCenterPreference");configGUI.add(configuration_space.graphLayout,"maxspeed",0,1e3).name("Max node speed");configGUI.add(configuration_space.graphLayout,"cohesionthreshold",0,2).name("Neighbor attraction threshold");configGUI.add(configuration_space.graphLayout,"repulsion",0,1e5).name("Repulsion");configGUI.add(configuration_space.graphLayout,"separationFactor",0,3).name("Separation factor");configGUI.add(configuration_space.graphLayout,"centerForce",0,.15).listen();configGUI.add(configuration_space.graphLayout,"extraCenterForce",0,.15).name("Extra center force");configGUI.add(configuration_space.graphLayout,"moveToCenter").name("Adjust to center");var customContainer=document.getElementById("gui");customContainer.appendChild(gui.domElement);globalUI.open()}function draw(){if(temperature>cold){tick();graph.update();configuration_space.update()}if(parameters.moveDotsRandomly){for(let i=0;i<parameters.speedUp;i++){graph.moveRobots()}}graph.show();configuration_space.show();if(parameters.showInfo){updateInfoString()}if(takeScreenshotGraph){takeScreenshotGraph=false;saveCanvas(graph.graphLayout.graphics,makeFileName("-graph.png"))}if(takeScreenshotConfigSpace){takeScreenshotConfigSpace=false;saveCanvas(configuration_space.graphLayout.graphics,makeFileName("-configspace.png"))}if(mouseIsPressed){ourMouseDragged()}}function makeFileName(postString){let time=str(year())+("0"+str(month())).slice(-2)+("0"+str(day())).slice(-2)+"_"+("0"+str(hour())).slice(-2)+("0"+str(minute())).slice(-2)+("0"+str(second())).slice(-2);return time+"-"+parameters.graphType+postString}function tick(){temperature=temperature*(1-coolingRate)}function reheat(){temperature=1}function setupEasyCam(g,thisDistance){let easycam=createEasyCam(g._renderer,{distance:thisDistance});easycam.setDistanceMin(10);easycam.setDistanceMax(3e3);easycam.attachMouseListeners(g._renderer);easycam.setWheelScale(300);easycam.setViewport([g.elt.offsetLeft,g.elt.offsetTop,g.elt.offsetWidth,g.elt.offsetHeight]);g.easycam=easycam}function initGraph(graphType){reheat();if(verbose)print("initGraph: "+graphType);if(graphType==="custom"&&customGraph!==undefined){graph=new Graph(customGraph.nodes,customGraph.edges)}else if(graphType.charAt(0)==="K"){graphType=graphType.slice(2,-1);let numbers=split(graphType,",");if(numbers.length==2){graph=completeBipartiteGraph(int(numbers[0]),int(numbers[1]))}else if(numbers.length==1){graph=completeGraph(int(numbers[0]))}}else if(graphType.charAt(0)==="C"){graphType=graphType.slice(2,-1);let numbers=split(graphType,",");if(numbers.length==1){graph=chainGraph(int(numbers[0]))}}else if(graphType.charAt(0)==="W"){graphType=graphType.slice(2,-1);let numbers=split(graphType,",");if(numbers.length==1){graph=wheelGraph(int(numbers[0]))}}graph.createGraphLayout(graphicsForGraph,true);configuration_space=new Configuration_space(graph,2);if(verbose)print(configuration_space);updateURL()}class Graph{constructor(nodeLabels,edgeLabels){this.type="graph";this.nodes=nodeLabels;this.edges=edgeLabels}update(){this.graphLayout.update()}show(){this.graphLayout.show()}getRobots(){return[this.robotA,this.robotB]}otherRobot(robot){if(this.robotA===robot)return this.robotB;else return this.robotA}moveRobots(){let addtoA=parameters.amountMultiplier*parameters.robotASpeed;let addtoB=parameters.amountMultiplier*parameters.robotBSpeed;let nextA=this.robotA.amount+addtoA;let nextB=this.robotB.amount+addtoB;if(nextA>=1&&nextB<1){nextA=1;nextB=this.robotB.amount+addtoB*(1-this.robotA.amount)/addtoA}else if(nextA<1&&nextB>=1){nextB=1;nextA=this.robotA.amount+addtoA*(1-this.robotB.amount)/addtoB}else if(nextA>=1&&nextB>=1){let timeA=(1-this.robotA.amount)/(nextA-this.robotA.amount);let timeB=(1-this.robotB.amount)/(nextB-this.robotB.amount);if(timeA>timeB){nextB=1;nextA=this.robotA.amount+addtoA*timeB}else{nextA=1;nextB=this.robotB.amount+addtoB*timeA}}if(robotAmoving){this.robotA.setAmount(nextA)}if(robotBmoving){this.robotB.setAmount(nextB)}if(parameters.recordHistory){configuration_space.graphLayout.configuration.record(this.robotA.nodeFrom,this.robotA.nodeTo,this.robotA.amount,this.robotB.nodeFrom,this.robotB.nodeTo,this.robotB.amount)}}createGraphLayout(graphics,layout3D){this.graphLayout=new GraphLayout(this,graphics,layout3D);for(let nodeLabel of this.nodes){this.graphLayout.addNode(nodeLabel)}for(let edgeLabel of this.edges){let nodeFrom=this.graphLayout.getNode(edgeLabel[0]);let nodeTo=this.graphLayout.getNode(edgeLabel[1]);this.graphLayout.addEdge(edgeLabel,nodeFrom,nodeTo)}this.robotA=new Robot(this,this.graphLayout.nodes[0],0);this.robotB=new Robot(this,this.graphLayout.nodes[1],1);this.graphLayout.initlayout()}}class Configuration_space{constructor(graph,dimension){this.type="configuration_space";this.dimension=dimension;let positions=graph.nodes.concat(graph.edges);let possible_states=cartesianProductOf(positions,positions);this.states=possible_states.filter(is_state);if(verbose)console.log(this.states);if(verbose)print("States:");if(verbose)print(this.states);this.createGraphLayout(graphicsForConfigurationSpace,true)}update(){this.graphLayout.update()}show(){this.graphLayout.show()}getRobots(){return[]}getDegree(state){return flatten(state).length-this.dimension}addStates(label){let positions=graph.nodes.concat(graph.edges);let newPossibleStates=cartesianProductOf([label],positions).concat(cartesianProductOf(positions,[label]));if(verbose)console.log("newPossibleStates");if(verbose)console.log(newPossibleStates);let newStates=newPossibleStates.filter(is_state);for(let state of newStates){this.addStateToGraphLayout(state);this.states.push(state)}}removeStates(label){let survivingStates=[];let statesToDelete=[];for(let state of this.states){if(flatten(state).includes(label)){statesToDelete.push(state)}else{survivingStates.push(state)}}for(let state of statesToDelete){switch(this.getDegree(state)){case 0:this.graphLayout.deleteNode(state);break;case 1:this.graphLayout.deleteEdge(state);break;case 2:this.graphLayout.deleteSquare(state);break}this.states=survivingStates}}addStateToGraphLayout(state){switch(this.getDegree(state)){case 0:if(verbose)print("state_1:");if(verbose)print(state);this.graphLayout.addNode(state);break;case 1:if(verbose)print("state_1:");if(verbose)print(state);if(Array.isArray(state[0])){let nodeFrom=this.graphLayout.getNode([state[0][0],state[1]]);let nodeTo=this.graphLayout.getNode([state[0][1],state[1]]);this.graphLayout.addEdge(state,nodeFrom,nodeTo)}else if(Array.isArray(state[1])){let nodeFrom=this.graphLayout.getNode([state[0],state[1][0]]);let nodeTo=this.graphLayout.getNode([state[0],state[1][1]]);if(verbose)print("nodeFrom:");if(verbose)print(nodeFrom);this.graphLayout.addEdge(state,nodeFrom,nodeTo)}else{if(verbose)print("error")}break;case 2:if(verbose)print("state_2:");if(verbose)print(state);let edgeAfrom=this.graphLayout.getEdge(state[0][0],state[1],true);let edgeAto=this.graphLayout.getEdge(state[0][1],state[1],true);let edgeBfrom=this.graphLayout.getEdge(state[0],state[1][0],true);let edgeBto=this.graphLayout.getEdge(state[0],state[1][1],true);if(verbose)print(edgeAfrom);if(verbose)print(edgeAto);this.graphLayout.addSquare(state,edgeAfrom,edgeAto,edgeBfrom,edgeBto);break}}createGraphLayout(graphics,layout3D){this.graphLayout=new GraphLayout(this,graphics,layout3D);this.graphLayout.showConfiguration=true;for(let state of this.states){this.addStateToGraphLayout(state)}this.graphLayout.configuration=new Configuration(this.graphLayout,graph.robotA,graph.robotB);this.graphLayout.initlayout()}}class GraphLayout{constructor(source,graphics,layout3D){this.source=source;this.graphics=graphics;this.layout3D=layout3D;this.updating=!true;this.layoutGraph=true;this.nodes=[];this.nodeBorder=true;this.nodeBorderWidth=.05;this.showNodes=true;this.edges=[];this.showEdges=true;this.squares=[];this.showSquares=true;this.planarForce=0;this.centerForce=0;this.extraCenterForce=0;this.moveToCenter=true;this.edgelength=100;this.firstCoordinateEdgeLength=100;this.secondCoordinateEdgeLength=100;this.firstCoordinateMirrorEdgeLength=100;this.secondCoordinateMirrorEdgeLength=100;this.graphEdgeForce=.01;this.firstCoordinateForce=.05;this.secondCoordinateForce=.01;this.firstCoordinateMirrorForce=0;this.secondCoordinateMirrorForce=0;this.extraCenterPreference=0;this.coordinatePreference=.01;this.center=createVector(0,0,0);this.heat=1;this.coolDown=.01;this.maxspeed=180;this.cohesionthreshold=10;this.cohesionFactor=1;this.repulsion=5e4;this.separationFactor=1;this.keyboardactive=true}initlayout(){for(let i=0;i<100;i++){for(let node of this.nodes){node.update(this.nodes);node.move()}}}show(){this.graphics.clear();let gl=graphicsForConfigurationSpace.canvas.getContext("webgl");gl.disable(gl.DEPTH_TEST);if(this.source.type==="configuration_space"&&parameters.showConfigurationspace){if(this.showSquares){for(let square of this.squares)square.show()}}gl.enable(gl.DEPTH_TEST);if(this.source.type==="configuration_space"){if(parameters.showGraph){for(let node of graph.graphLayout.nodes){node.show(this.graphics)}for(let edge of graph.graphLayout.edges){edge.show(this.graphics)}if(parameters.showRobots){for(let robot of graph.getRobots()){robot.show(this.graphics)}}}}if(this.source.type==="graph"||parameters.showConfigurationspace){if(this.showEdges){for(let edge of this.edges){edge.show(this.graphics)}}if(this.showNodes){for(let node of this.nodes){node.show(this.graphics)}}}if(this.source.type==="graph"){if(parameters.showRobots){for(let robot of this.source.getRobots()){robot.show(this.graphics)}}}if(this.source.type==="configuration_space"&&parameters.showConfigurationspace&&parameters.showRobots){if(this.showConfiguration){this.configuration.show()}}this.counter++}update(){if(running){if(this.moveToCenter){let centerAdjustmentX=0;let centerAdjustmentY=0;let centerAdjustmentZ=0;for(let node of this.nodes){centerAdjustmentX+=(-node.position.x+this.center.x)/this.nodes.length;centerAdjustmentY+=(-node.position.y+this.center.y)/this.nodes.length;centerAdjustmentZ+=(-node.position.z+this.center.z)/this.nodes.length}for(let node of this.nodes){if(!node.frozen)node.position.add(.1*centerAdjustmentX,.1*centerAdjustmentY,.1*centerAdjustmentZ)}}if(this.layoutGraph)for(let node of this.nodes){if(forcesActive){node.update(this.nodes);node.move()}}}}getNode(label){for(let node of this.nodes){if(arraysEqual(node.label,label)){return node}}if(verbose)print("returning false");return false}getEdge(labelA,labelB,directed){if(verbose)print("getEdge: ");if(verbose)print(labelA);if(verbose)print(labelB);for(let edge of this.edges){if(arraysEqual([labelA,labelB],edge.label)||!directed&&arraysEqual([labelB,labelA],edge.label)){if(verbose)print("FOUND!");if(verbose)print(edge);return edge}}}getSquare(labelA,labelB){if(verbose)print("getSquare: ");if(verbose)print(labelA);if(verbose)print(labelB);for(let square of this.squares){if(verbose)print(square.label);if(arraysEqual([labelA,labelB],square.label)){if(verbose)print("FOUND!");if(verbose)print(square);return square}}}addNode(label,x,y,z){if(verbose)print("adding node "+label);let r=100;let node=new Node(this,label,x===undefined?random(-r,r):x,y===undefined?random(-r,r):y,z===undefined?random(-r,r):z);this.nodes.push(node);return node}deleteNode(label){let nodeToDelete=this.getNode(label);this.nodes.splice(this.nodes.indexOf(nodeToDelete),1)}addEdge(label,nodeFrom,nodeTo){if(verbose)print("adding edge "+label);if(verbose)print("connecting:");if(verbose)print(nodeFrom.label+" to "+nodeTo.label);let edge=new Edge(this,label,nodeFrom,nodeTo);this.edges.push(edge);nodeTo.connectTo(nodeFrom);nodeFrom.connectTo(nodeTo);return edge}deleteEdge(label){let edgeToDelete=this.getEdge(label[0],label[1],false);this.edges.splice(this.edges.indexOf(edgeToDelete),1)}addSquare(label,edgeAfrom,edgeAto,edgeBfrom,edgeBto){let square=new Square(this,label,edgeAfrom,edgeAto,edgeBfrom,edgeBto);this.squares.push(square)}deleteSquare(label){let squareToDelete=this.getSquare(label[0],label[1]);this.squares.splice(this.squares.indexOf(squareToDelete),1)}}class Node{constructor(graphLayout,label,x,y,z){this.graphLayout=graphLayout;this.graphics=graphLayout.graphics;this.labelText=labelToString(label);this.applyExtraCenterForce=!true;this.label=label;if(verbose)print(label);this.active=false;if(graphLayout.layout3D){this.position=createVector(x,y,z);this.velocity=createVector(0,0,0);this.acceleration=createVector(0,0,0)}else{this.position=createVector(x,y);this.velocity=createVector(0,0);this.acceleration=createVector(0,0)}this.frozen=false;this.alive=true;this.neighbors=[];this.squareneighbors=[]}connectTo(node){this.neighbors.push(node)}connectToDiagonally(node){this.squareneighbors.push(node)}update(nodes){let sep=this.separate(nodes);if(this.graphLayout.source.type==="graph"){let coh=this.cohese(this.graphLayout.edgelength,this.graphLayout.graphEdgeForce,this.neighbors);coh.mult(1*this.graphLayout.cohesionFactor);this.acceleration.add(sep);this.acceleration.add(coh);let planarNodePosition=createVector(this.position.x,this.position.y,0);let planarForceAddition=this.seek(this.graphLayout.planarForce,planarNodePosition);this.acceleration.add(planarForceAddition)}else{let cohA=this.cohese(this.graphLayout.firstCoordinateEdgeLength,this.graphLayout.firstCoordinateForce,this.neighbors.filter((neighbor=>neighbor.label[0]===this.label[0])));let cohB=this.cohese(this.graphLayout.secondCoordinateEdgeLength,this.graphLayout.secondCoordinateForce,this.neighbors.filter((neighbor=>neighbor.label[1]===this.label[1])));let cohAgraph=this.seek(this.graphLayout.coordinatePreference+this.graphLayout.firstCoordinateMirrorForce,graph.graphLayout.getNode(this.label[0]).position);let cohBgraph=this.seek(this.graphLayout.coordinatePreference+this.graphLayout.secondCoordinateMirrorForce,graph.graphLayout.getNode(this.label[1]).position);graph.graphLayout.nodes.forEach((node=>{if(node.applyExtraCenterForce){if(this.label[0]===node.label){cohAgraph=cohAgraph.add(this.seek(this.graphLayout.extraCenterPreference,node.position))}if(this.label[1]===node.label){cohBgraph=cohBgraph.add(this.seek(this.graphLayout.extraCenterPreference,node.position))}}}));sep.mult(1*this.graphLayout.separationFactor);cohA.mult(1*this.graphLayout.cohesionFactor);cohB.mult(1*this.graphLayout.cohesionFactor);cohAgraph.mult(+1*this.graphLayout.cohesionFactor);cohBgraph.mult(-1*this.graphLayout.cohesionFactor);this.acceleration.add(sep);this.acceleration.add(cohA);this.acceleration.add(cohB);this.acceleration.add(cohAgraph);this.acceleration.add(cohBgraph)}let centerForceAddition=this.seek(this.graphLayout.centerForce,this.graphLayout.center);this.acceleration.add(centerForceAddition);if(this.applyExtraCenterForce){let extraCenterForceAddition=this.seek(this.graphLayout.extraCenterForce,this.graphLayout.center);this.acceleration.add(extraCenterForceAddition)}}move(){if(!this.frozen){limitVector(this.velocity,this.graphLayout.maxspeed);this.velocity.add(this.acceleration);this.position.add(this.velocity);this.velocity.mult(.9);this.acceleration.mult(0)}}separate(relevantnodes){let sum=new createVector(0,0,0);for(let other of relevantnodes){let diff=p5.Vector.sub(this.position,other.position);let d=diff.mag();if(d>1){diff.normalize().mult(this.graphLayout.repulsion/(d*d));sum.add(diff)}}return sum}cohese(edgelength,force,relevantnodes){let sum=new createVector(0,0,0);for(let other of relevantnodes){let diff=p5.Vector.sub(this.position,other.position);let d=diff.mag()-edgelength;if(abs(d)>this.graphLayout.cohesionthreshold){diff.normalize().mult(-force*d);sum.add(diff)}}limitVector(sum,edgelength);return sum}seek(force,goal){let diff=p5.Vector.sub(goal,this.position);let d=diff.mag();if(abs(d)>this.graphLayout.cohesionthreshold){diff.normalize().mult(force*d)}return diff}occupied(){let result=false;if(this===graph.robotA.nodeFrom||this===graph.robotA.nodeTo||this===graph.robotB.nodeFrom||this===graph.robotB.nodeTo){result=true}return result}show(g){if(this.nodeBorder){g.stroke(150);g.strokeWeight(parameters.nodeSize*this.graphLayout.nodeBorderWidth)}else{g.noStroke()}if(this.graphLayout.layout3D){g.push();g.translate(this.position.x,this.position.y,this.position.z);if(deleteNodeMode&&!this.occupied()&&g===graphicsForGraph){g.fill(parameters.deleteNodeColor)}else{if(this.applyExtraCenterForce){g.fill(0,255,0)}else if(this.lastSelected){g.fill(50,50,50)}else if(this.active){g.fill(parameters.activeDotColor)}else if(this.firstNodeOfEdge){g.fill(parameters.selectedNodeForEdgeColor)}else{g.fill(parameters.colorNode)}}if(parameters.sphereView){g.sphere(.5*parameters.nodeSize,parameters.sphereDetail,parameters.sphereDetail)}else{let rotation=g.easycam.getRotation();let rotXYZ=QuaternionToEuler(rotation[0],rotation[1],rotation[2],rotation[3]);g.rotateX(-rotXYZ[0]);g.rotateY(-rotXYZ[1]);g.rotateZ(-rotXYZ[2]);g.translate(0,0,10);g.stroke(0);g.strokeWeight(1);g.ellipse(0,0,parameters.nodeSize,parameters.nodeSize)}g.pop()}if(parameters.showText){g.fill(0,0,0);g.textAlign(CENTER,CENTER);g.textFont(font);g.textSize(30);if(this.graphLayout.layout3D){let rotation=g.easycam.getRotation();let rotXYZ=QuaternionToEuler(rotation[0],rotation[1],rotation[2],rotation[3]);g.push();g.translate(this.position.x,this.position.y,this.position.z);g.rotateX(-rotXYZ[0]);g.rotateY(-rotXYZ[1]);g.rotateZ(-rotXYZ[2]);g.translate(parameters.labelX,parameters.labelY,parameters.labelZ);g.text(this.labelText,0,0);g.pop()}else{g.push();g.translate(this.position.x,this.position.y,this.position.z);g.text(this.labelText,0,0);g.pop()}}}}class Edge{constructor(graphLayout,label,nodeFrom,nodeTo){this.graphLayout=graphLayout;this.graphics=graphLayout.graphics;this.label=label;this.nodeFrom=nodeFrom;this.nodeTo=nodeTo;this.subPoints=[];this.owner;if(Array.isArray(this.nodeFrom.label)&&Array.isArray(this.nodeTo.label)){if(this.nodeFrom.label[0]===this.nodeTo.label[0]){this.edgeType="robotBedge"}else if(this.nodeFrom.label[1]===this.nodeTo.label[1]){this.edgeType="robotAedge"}else{print("ERRRORR")}}else{this.edgeType="graphEdge"}}amountAlong(amount){return p5.Vector.lerp(this.nodeFrom.position,this.nodeTo.position,amount)}connectedTo(node){return node===this.nodeFrom||node===this.nodeTo}getPosition(amount){return p5.Vector.lerp(this.nodeFrom.position,this.nodeTo.position,amount)}show(g){if(this.owner===undefined){if(this.candidateForRobot===0){g.stroke(parameters.colorRobotA)}else if(this.candidateForRobot===1){g.stroke(parameters.colorRobotB)}else if(this.edgeType==="graphEdge"){g.stroke(parameters.colorGraphEdge)}else if(this.edgeType==="robotBedge"){g.stroke(parameters.colorRobotB)}else if(this.edgeType==="robotAedge"){g.stroke(parameters.colorRobotA)}}else{if(this.owner.index===0){g.stroke(parameters.colorRobotA)}else if(this.owner.index===1){g.stroke(parameters.colorRobotB)}else{g.stroke(0,255,0)}}if(this.edgeType==="graphEdge"){g.strokeWeight(parameters.edgeWidthGraph)}else{g.strokeWeight(parameters.edgeWidthConfigSpace)}g.line(this.nodeFrom.position.x,this.nodeFrom.position.y,this.nodeFrom.position.z,this.nodeTo.position.x,this.nodeTo.position.y,this.nodeTo.position.z);if(parameters.gridOn){let thisGranularity;if(this.edgeType==="graphEdge"){thisGranularity=1}else if(this.edgeType==="robotBedge"){thisGranularity=parameters.granularityFirstCoordinate}else if(this.edgeType==="robotAedge"){thisGranularity=parameters.granularitySecondCoordinate}for(let n=1;n<thisGranularity;n++){this.subPoints[n]=p5.Vector.lerp(this.nodeFrom.position,this.nodeTo.position,1*n/thisGranularity)}}}}class Square{constructor(graphLayout,label,edgeAfrom,edgeAto,edgeBfrom,edgeBto){this.graphLayout=graphLayout;this.graphics=graphLayout.graphics;this.label=label;this.edgeAfrom=edgeAfrom;this.edgeAto=edgeAto;this.edgeBfrom=edgeBfrom;this.edgeBto=edgeBto;this.subPoints=[];if(verbose)print("square created!");if(verbose)print(this)}getPosition(amountA,amountB){let X=edgeAfrom.amountAlong(amountA);let Y=edgeAto.amountAlong(amountA);return p5.Vector.lerp(X,Y,amountB)}show(){if(parameters.gridOn){this.graphics.strokeWeight(parameters.edgeWidthGrid);let firstGranularity=min(this.edgeAfrom.subPoints.length,parameters.granularityFirstCoordinate);for(let n=1;n<firstGranularity;n++){let a=this.edgeAfrom.subPoints[n];let b=this.edgeAto.subPoints[n];this.graphics.stroke(parameters.colorRobotA);this.graphics.line(a.x,a.y,a.z,b.x,b.y,b.z)}let secondGranularity=min(this.edgeBfrom.subPoints.length,parameters.granularitySecondCoordinate);for(let n=1;n<secondGranularity;n++){let a=this.edgeBfrom.subPoints[n];let b=this.edgeBto.subPoints[n];this.graphics.stroke(parameters.colorRobotB);this.graphics.line(a.x,a.y,a.z,b.x,b.y,b.z)}}if(parameters.squareOn){this.graphics.noStroke();this.graphics.fill(red(parameters.squareColor),green(parameters.squareColor),blue(parameters.squareColor),parameters.squareOpacity);this.graphics.beginShape();this.graphics.vertex(this.edgeAfrom.nodeFrom.position.x,this.edgeAfrom.nodeFrom.position.y,this.edgeAfrom.nodeFrom.position.z);this.graphics.vertex(this.edgeAfrom.nodeTo.position.x,this.edgeAfrom.nodeTo.position.y,this.edgeAfrom.nodeTo.position.z);this.graphics.vertex(this.edgeAto.nodeTo.position.x,this.edgeAto.nodeTo.position.y,this.edgeAto.nodeTo.position.z);this.graphics.vertex(this.edgeAto.nodeFrom.position.x,this.edgeAto.nodeFrom.position.y,this.edgeAto.nodeFrom.position.z);this.graphics.endShape(CLOSE)}}}class Robot{constructor(graph,node,index){this.graph=graph;this.nodeFrom=node;this.nodeTo=node;this.amount=0;this.index=index;this.visited=[]}occupyingNodes(){return[this.nodeFrom,this.nodeTo]}getCandidates(){return this.nodeFrom.neighbors.filter((x=>!this.graph.otherRobot(this).occupyingNodes().includes(x)))}getAllPossibleEdges(){let forbiddenNodes=this.graph.otherRobot(this).occupyingNodes().map((n=>n.label));return this.graph.edges.filter((x=>!forbiddenNodes.includes(x[0])&&!forbiddenNodes.includes(x[1])))}getRandomNeighbor(){let candidates=this.getCandidates();if(candidates.length>0){return candidates[floor(random(candidates.length))]}else{return false}}setNodeTo(node){this.visited.push(node);this.nodeTo=node;this.amount=1e-4;this.graph.graphLayout.getEdge(this.nodeFrom.label,this.nodeTo.label,false).owner=this}setNeighbor(node){this.nodeTo=node;this.graph.graphLayout.getEdge(this.nodeFrom.label,this.nodeTo.label,false).owner=this}setRandomNeighborIfPossible(){console.log("setRandomNeighborIfPossible");let candidates=this.getCandidates();if(candidates.length>0){this.nodeTo=candidates[floor(random(candidates.length))]}}setAmount(nextAmount){if(this.nodeFrom!==this.nodeTo){this.amount=constrain(nextAmount,0,1)}if(this.amount===0){if(verbose)console.log("this.amount === 0.0");if(verbose)console.log(this.nodeFrom.label+" "+this.nodeTo.label);if(verbose)console.log(this.graph.graphLayout.getEdge(this.nodeFrom.label,this.nodeTo.label,false));if(this.nodeFrom!==this.nodeTo){this.graph.graphLayout.getEdge(this.nodeFrom.label,this.nodeTo.label,false).owner=undefined;this.nodeTo=this.nodeFrom}if(parameters.moveDotsRandomly){let nextNode=this.getRandomNeighbor();if(nextNode){this.setNodeTo(nextNode)}else{return false}}}if(this.amount===1){if(verbose)console.log("this.amount === 1.0");if(verbose)console.log(this.nodeFrom.label+" "+this.nodeTo.label);if(verbose)console.log(this.graph.graphLayout.getEdge(this.nodeFrom.label,this.nodeTo.label,false));if(this.nodeFrom!==this.nodeTo){if(verbose)console.log("resetting!");this.graph.graphLayout.getEdge(this.nodeFrom.label,this.nodeTo.label,false).owner=undefined;this.amount=0;this.nodeFrom=this.nodeTo}}}getPosition(){return p5.Vector.lerp(this.nodeFrom.position,this.nodeTo.position,this.amount)}inANode(){return this.nodeFrom===this.nodeTo}show(g){let position=this.getPosition();if(this.nodeBorder){g.stroke(150);g.strokeWeight(parameters.graphRobotSize*this.graphLayout.nodeBorderWidth)}else{g.noStroke()}g.fill(this.index===0?parameters.colorRobotA:parameters.colorRobotB);if(this.graph.graphLayout.layout3D){g.push();g.translate(position.x,position.y,position.z);if(parameters.sphereView){let d=parameters.sphereDetail;g.sphere((this.active?.55:.5)*parameters.robotsNodeSize,d,d)}else{let rotation=g.easycam.getRotation();let rotXYZ=QuaternionToEuler(rotation[0],rotation[1],rotation[2],rotation[3]);g.rotateX(-rotXYZ[0]);g.rotateY(-rotXYZ[1]);g.rotateZ(-rotXYZ[2]);g.translate(0,0,20);g.ellipse(0,0,(this.active?1.1:1)*parameters.robotsNodeSize,(this.active?1.1:1)*parameters.robotsNodeSize)}g.pop()}}}class Configuration{constructor(graphLayout,robotA,robotB){this.graphLayout=graphLayout;this.robotA=robotA;this.robotB=robotB;this.history=[];this.updatePosition(this.robotA.nodeFrom,this.robotA.nodeTo,this.robotA.amount,this.robotB.nodeFrom,this.robotB.nodeTo,this.robotB.amount)}updatePosition(robotAfrom,robotAto,amountA,robotBfrom,robotBto,amountB){this.position=this.getPosition(robotAfrom,robotAto,amountA,robotBfrom,robotBto,amountB)}getPosition(robotAfrom,robotAto,amountA,robotBfrom,robotBto,amountB){let position;if(amountA===0&&amountB===0){let stateLabel=[robotAfrom.label,robotBfrom.label];let state=this.graphLayout.getNode(stateLabel);position=state.position}else if(amountA>0&&amountB===0){let stateFromLabel=[robotAfrom.label,robotBfrom.label];let stateToLabel=[robotAto.label,robotBfrom.label];let stateFrom=this.graphLayout.getNode(stateFromLabel);let stateTo=this.graphLayout.getNode(stateToLabel);position=p5.Vector.lerp(stateFrom.position,stateTo.position,amountA)}else if(amountA===0&&amountB>0){let stateFromLabel=[robotAfrom.label,robotBfrom.label];let stateToLabel=[robotAfrom.label,robotBto.label];let stateFrom=this.graphLayout.getNode(stateFromLabel);let stateTo=this.graphLayout.getNode(stateToLabel);position=p5.Vector.lerp(stateFrom.position,stateTo.position,amountB)}else{let topLeft=this.graphLayout.getNode([robotAfrom.label,robotBfrom.label]).position;let topRight=this.graphLayout.getNode([robotAto.label,robotBfrom.label]).position;let botLeft=this.graphLayout.getNode([robotAfrom.label,robotBto.label]).position;let botRight=this.graphLayout.getNode([robotAto.label,robotBto.label]).position;let topX=p5.Vector.lerp(topLeft,topRight,amountA);let botX=p5.Vector.lerp(botLeft,botRight,amountA);position=p5.Vector.lerp(topX,botX,amountB)}return position}getCrosshair(robotAfrom,robotAto,amountA,robotBfrom,robotBto,amountB){let topLeft=this.graphLayout.getNode([robotAfrom.label,robotBfrom.label]).position;let topRight=this.graphLayout.getNode([robotAto.label,robotBfrom.label]).position;let botLeft=this.graphLayout.getNode([robotAfrom.label,robotBto.label]).position;let botRight=this.graphLayout.getNode([robotAto.label,robotBto.label]).position;let topX=p5.Vector.lerp(topLeft,topRight,amountA);let botX=p5.Vector.lerp(botLeft,botRight,amountA);let leftY=p5.Vector.lerp(topLeft,botLeft,amountB);let rightY=p5.Vector.lerp(topRight,botRight,amountB);return[topX,botX,leftY,rightY]}getHyperplaneLine(robotFrom,robotTo,amount,possibleEdge,flip){if(flip){let topLeft=this.graphLayout.getNode([robotFrom.label,possibleEdge[0]]).position;let topRight=this.graphLayout.getNode([robotTo.label,possibleEdge[0]]).position;let botLeft=this.graphLayout.getNode([robotFrom.label,possibleEdge[1]]).position;let botRight=this.graphLayout.getNode([robotTo.label,possibleEdge[1]]).position;let topX=p5.Vector.lerp(topLeft,topRight,amount);let botX=p5.Vector.lerp(botLeft,botRight,amount);return[topX,botX]}else{let topLeft=this.graphLayout.getNode([possibleEdge[0],robotFrom.label]).position;let topRight=this.graphLayout.getNode([possibleEdge[0],robotTo.label]).position;let botLeft=this.graphLayout.getNode([possibleEdge[1],robotFrom.label]).position;let botRight=this.graphLayout.getNode([possibleEdge[1],robotTo.label]).position;let topX=p5.Vector.lerp(topLeft,topRight,amount);let botX=p5.Vector.lerp(botLeft,botRight,amount);return[topX,botX]}}record(robotAfrom,robotAto,amountA,robotBfrom,robotBto,amountB){this.history.push([robotAfrom,robotAto,amountA,robotBfrom,robotBto,amountB])}resetHistory(){this.history=[]}show(){if(parameters.showHistory){for(let i=0;i<this.history.length-1;i++){let A=this.history[i];let B=this.history[i+1];let from=this.getPosition(A[0],A[1],A[2],A[3],A[4],A[5]);let to=this.getPosition(B[0],B[1],B[2],B[3],B[4],B[5]);this.graphLayout.graphics.stroke(0);this.graphLayout.graphics.strokeWeight(1);this.graphLayout.graphics.line(from.x,from.y,from.z,to.x,to.y,to.z)}}this.showAt(this.robotA.nodeFrom,this.robotA.nodeTo,this.robotA.amount,this.robotB.nodeFrom,this.robotB.nodeTo,this.robotB.amount)}showAt(robotAfrom,robotAto,amountA,robotBfrom,robotBto,amountB){this.updatePosition(robotAfrom,robotAto,amountA,robotBfrom,robotBto,amountB);let robotApossibilites=this.robotA.getAllPossibleEdges();let robotBpossibilites=this.robotB.getAllPossibleEdges();if(parameters.showHyperplanes){for(let possibleEdge of robotApossibilites){let c=this.getHyperplaneLine(robotBfrom,robotBto,amountB,possibleEdge,false);let a=c[0];let b=c[1];this.graphLayout.graphics.stroke(parameters.colorRobotA);this.graphLayout.graphics.strokeWeight(8);this.graphLayout.graphics.line(a.x,a.y,a.z,b.x,b.y,b.z)}for(let possibleEdge of robotBpossibilites){let c=this.getHyperplaneLine(robotAfrom,robotAto,amountA,possibleEdge,true);let a=c[0];let b=c[1];this.graphLayout.graphics.stroke(parameters.colorRobotB);this.graphLayout.graphics.strokeWeight(8);this.graphLayout.graphics.line(a.x,a.y,a.z,b.x,b.y,b.z)}}else{if(this.active){let crosshairs=this.getCrosshair(robotAfrom,robotAto,amountA,robotBfrom,robotBto,amountB);this.graphLayout.graphics.strokeWeight(8);if(crosshairs.length===4){let a=crosshairs[0];let b=crosshairs[1];this.graphLayout.graphics.stroke(parameters.colorRobotB);this.graphLayout.graphics.line(a.x,a.y,a.z,b.x,b.y,b.z);let c=crosshairs[2];let d=crosshairs[3];this.graphLayout.graphics.stroke(parameters.colorRobotA);this.graphLayout.graphics.line(c.x,c.y,c.z,d.x,d.y,d.z)}}}this.graphLayout.graphics.push();this.graphLayout.graphics.translate(this.position.x,this.position.y,this.position.z);this.graphLayout.graphics.noStroke();if(this.active){this.graphLayout.graphics.fill(parameters.activeDotColor)}else{this.graphLayout.graphics.fill(parameters.colorConfig)}if(parameters.sphereView){let d=parameters.sphereDetail;this.graphLayout.graphics.sphere(.5*parameters.configNodeSize,d,d)}else{let rotation=this.graphLayout.graphics.easycam.getRotation();let rotXYZ=QuaternionToEuler(rotation[0],rotation[1],rotation[2],rotation[3]);this.graphLayout.graphics.rotateX(-rotXYZ[0]);this.graphLayout.graphics.rotateY(-rotXYZ[1]);this.graphLayout.graphics.rotateZ(-rotXYZ[2]);this.graphLayout.graphics.translate(0,0,20);this.graphLayout.graphics.ellipse(0,0,parameters.configNodeSize,parameters.configNodeSize)}this.graphLayout.graphics.pop()}}function completeGraph(m){let nodes=[...Array(m).keys()];let edges=[];for(let F of nodes){for(let T of nodes){if(F!==T&&F<T){edges.push([F,T])}}}return new Graph(nodes,edges)}function chainGraph(m){let nodes=[...Array(m).keys()];let edges=[];for(let F of nodes){edges.push([F,(F+1)%m]);if(verbose)print(F)}return new Graph(nodes,edges)}function wheelGraph(m){let nodes=[...Array(m+1).keys()];let edges=[];for(let F of nodes){if(F!==m){edges.push([F,m])}edges.push([F,(F+1)%m]);if(verbose)print(F)}return new Graph(nodes,edges)}function completeBipartiteGraph(m,n){if(verbose)print("completeBipartiteGraph: "+m+" "+n);let nodesFrom=[...Array(m).keys()];let nodesTo=[...Array(n).keys()].map((x=>x+m));let nodes=[...Array(m+n).keys()];let edges=[];for(let F of nodesFrom){for(let T of nodesTo){edges.push([F,T])}}return new Graph(nodes,edges)}function addNode(x,y,z){let label=Math.max(...graph.nodes)+1;graph.nodes.push(label);let addedNode=graph.graphLayout.addNode(label,x,y,z);configuration_space.addStates(label);graph.graphLayout.centerForce=Math.max(.02,graph.graphLayout.centerForce);configuration_space.graphLayout.centerForce=Math.max(.02,configuration_space.graphLayout.centerForce);addSingleNodeMode=false;parameters.graphType="custom";updateURL();return addedNode}function deleteNode(node){for(neighbor of node.neighbors){neighbor.neighbors=neighbor.neighbors.filter((x=>!(x===node)))}graph.nodes.splice(graph.nodes.indexOf(node.label),1);let survivingEdgeLabels=[];let edgeLabelsToDelete=[];for(edge of graph.edges){if(edge.includes(node.label)){edgeLabelsToDelete.push(edge)}else{survivingEdgeLabels.push(edge)}}graph.edges=survivingEdgeLabels;for(edge of edgeLabelsToDelete){graph.graphLayout.deleteEdge(edge)}graph.graphLayout.deleteNode(node.label);configuration_space.removeStates(node.label);parameters.graphType="custom";updateURL()}function addEdge(nodeFrom,nodeTo){let label=[nodeFrom.label,nodeTo.label];graph.edges.push(label);graph.graphLayout.addEdge(label,nodeFrom,nodeTo);configuration_space.addStates(label);parameters.graphType="custom";updateURL()}function mouseWheel(event){if(areWeOnTheLeft){if(parameters.syncView)configuration_space.graphLayout.graphics.easycam.setState(graph.graphLayout.graphics.easycam.getState())}else{if(parameters.syncView)graph.graphLayout.graphics.easycam.setState(configuration_space.graphLayout.graphics.easycam.getState())}}let mouseIsPressedOnLeftSide=false;function mousePressedOnLeft(e){console.log("mousePressedOnLeft")}function mousePressed(e){areWeOnTheLeft=e.target===graphicsForGraph.canvas;if(verbose)console.log("mouse pressed");if(verbose)console.log(areWeOnTheLeft);if(verbose)console.log(parameters.mode);if(parameters.mode==="Move"||parameters.mode==="Edit"){if(parameters.mode==="Move"){let currentGraphics=areWeOnTheLeft?graphicsForGraph:graphicsForConfigurationSpace;let relativeMouseX=mouseX-currentGraphics.easycam.viewport[0]-currentGraphics.easycam.viewport[2]/2;let relativeMouseY=mouseY-currentGraphics.easycam.viewport[1]-currentGraphics.easycam.viewport[3]/2;let mousePos=createVector(relativeMouseX,relativeMouseY);let v=currentGraphics.easycam.getUpVector();cameraState=currentGraphics.easycam.getState();let selectedNode;let selectedDistance;if(parameters.mode==="Move"){{let upVectorRobotNode=createVector(v[0],v[1],v[2]).setMag(.5*parameters.robotsNodeSize);let robotAnode=graph.robotA;let robotBnode=graph.robotB;robotAnode.active=false;robotBnode.active=false;let robotAposition=robotAnode.getPosition();let robotBposition=robotBnode.getPosition();let screenPosA=currentGraphics.screenPosition(robotAposition);let screenPosB=currentGraphics.screenPosition(robotBposition);let distanceA=mousePos.dist(screenPosA);let distanceB=mousePos.dist(screenPosB);let auxPosA=currentGraphics.screenPosition(p5.Vector.add(robotAposition,upVectorRobotNode));let auxPosB=currentGraphics.screenPosition(p5.Vector.add(robotBposition,upVectorRobotNode));let screenRadiusA=screenPosA.dist(auxPosA);let screenRadiusB=screenPosB.dist(auxPosB);if(distanceA<screenRadiusA){selectedNode=robotAnode}else if(distanceB<screenRadiusB){selectedNode=robotBnode}}{let upVectorConfigNode=createVector(v[0],v[1],v[2]).setMag(.5*parameters.configNodeSize);let configNode=configuration_space.graphLayout.configuration;configNode.active=false;let screenPos=currentGraphics.screenPosition(configNode.position);let distance=mousePos.dist(screenPos);let auxPos=currentGraphics.screenPosition(p5.Vector.add(configNode.position,upVectorConfigNode));let screenRadius=screenPos.dist(auxPos);if(distance<screenRadius){selectedNode=configNode}}}if(selectedNode===undefined){let upVectorNode=createVector(v[0],v[1],v[2]).setMag(.5*parameters.nodeSize);let currentNodes=[].concat(graph.graphLayout.nodes).concat(configuration_space.graphLayout.nodes);for(let node of currentNodes){node.lastSelected=false}for(let node of currentNodes){node.active=false;let screenPos=currentGraphics.screenPosition(node.position);let distance=mousePos.dist(screenPos);let auxPos=currentGraphics.screenPosition(p5.Vector.add(node.position,upVectorNode));let screenRadius=screenPos.dist(auxPos);if(verbose)print(currentGraphics.screenPosition(node.position));if(distance<screenRadius&&(selectedNode===undefined||distance<selectedDistance)){selectedNode=node;selectedDistance=distance}}}if(selectedNode!==undefined){selectedNode.lastSelected=true;if(parameters.mode==="Edit"){if(nodeSelectedForEdgeAddition!==undefined){if(nodeSelectedForEdgeAddition!==selectedNode){if(graph.graphLayout.getEdge(nodeSelectedForEdgeAddition.label,selectedNode.label,false)===undefined){addEdge(nodeSelectedForEdgeAddition,selectedNode)}}nodeSelectedForEdgeAddition.firstNodeOfEdge=false;nodeSelectedForEdgeAddition=undefined}else{if(deleteNodeMode){if(!selectedNode.occupied()){deleteNode(selectedNode)}}else{nodeSelectedForEdgeAddition=selectedNode;selectedNode.firstNodeOfEdge=true}}}else if(parameters.mode==="Move"){selectedNode.active=true;if(verbose)console.log("selectedNode.active = true")}}else{if(parameters.mode==="Edit"){let addedNode=addNode();let currentGraphics=areWeOnTheLeft?graphicsForGraph:graphicsForConfigurationSpace;let relativeMouseX=mouseX-currentGraphics.easycam.viewport[0]-currentGraphics.easycam.viewport[2]/2;let relativeMouseY=mouseY-currentGraphics.easycam.viewport[1]-currentGraphics.easycam.viewport[3]/2;let mouse2D=createVector(relativeMouseX,relativeMouseY);for(let n=0;n<10;n++){let screenPosOfMovingNode=currentGraphics.screenPosition(addedNode.position);let mouseDiff=p5.Vector.sub(mouse2D,screenPosOfMovingNode);let dst=applyToVec3(cameraState.rotation,[mouseDiff.x,mouseDiff.y,0]);let xMovement=dst[0];let yMovement=dst[1];let zMovement=dst[2];let move=createVector(xMovement,yMovement,zMovement).setMag(mouseDiff.mag()*.5);addedNode.position.add(move)}}}}if(graph.robotA.active===true||graph.robotB.active===true){let activeRobot=graph.robotA.active===true?graph.robotA:graph.robotB;let possibleEdges=activeRobot.getAllPossibleEdges();for(let possibleEdge of possibleEdges){graph.graphLayout.getEdge(possibleEdge[0],possibleEdge[1]).candidateForRobot=activeRobot.index}}}else if(parameters.mode==="View"){reheat()}}function ourMouseDragged(){if(verbose)console.log("ourMouseDragged");if(parameters.mode==="Move"){reheat();let currentGraphics=areWeOnTheLeft?graphicsForGraph:graphicsForConfigurationSpace;let relativeMouseX=mouseX-currentGraphics.easycam.viewport[0]-currentGraphics.easycam.viewport[2]/2;let relativeMouseY=mouseY-currentGraphics.easycam.viewport[1]-currentGraphics.easycam.viewport[3]/2;let mouse2D=createVector(relativeMouseX,relativeMouseY);let movingObject,ordinaryNodeMoving;{if(graph.robotA.active===true||graph.robotB.active===true){let activeRobot=graph.robotA.active===true?graph.robotA:graph.robotB;if(activeRobot.inANode()){let robotScreenPos=currentGraphics.screenPosition(activeRobot.getPosition());let mouseChange=p5.Vector.sub(mouse2D,robotScreenPos);let candidates=activeRobot.getCandidates();let bestCandidate;let bestValue;for(let candidate of candidates){let screenPosOfCandidate=currentGraphics.screenPosition(candidate.position);let changeForCandidate=p5.Vector.sub(screenPosOfCandidate,robotScreenPos);let value=p5.Vector.dot(changeForCandidate,mouseChange)/(mouseChange.mag()*changeForCandidate.mag());let threshold=changeForCandidate.dot(mouseChange)/pow(changeForCandidate.mag(),2);if(threshold>.05){if(bestCandidate===undefined||value>bestValue){bestCandidate=candidate;bestValue=value}}}if(bestCandidate!==undefined){activeRobot.setNodeTo(bestCandidate)}}else{let robotScreenPos=currentGraphics.screenPosition(activeRobot.getPosition());let mouseChange=p5.Vector.sub(mouse2D,robotScreenPos).mult(.9);let nodeFromScreenPos=currentGraphics.screenPosition(activeRobot.nodeFrom.position);let nodeToScreenPos=currentGraphics.screenPosition(activeRobot.nodeTo.position);let edgeSomething=p5.Vector.sub(nodeToScreenPos,nodeFromScreenPos);let amountChange=edgeSomething.dot(mouseChange)/pow(edgeSomething.mag(),2);activeRobot.setAmount(activeRobot.amount+amountChange)}}else{if(verbose)console.log("moving node");for(let node of graph.graphLayout.nodes){if(node.active===true){ordinaryNodeMoving=node;if(verbose)console.log("movingNode = node");if(verbose)console.log(node)}}}}{if(configuration_space.graphLayout.configuration.active===true){movingObject=configuration_space.graphLayout.configuration;let configuration2D=graphicsForConfigurationSpace.screenPosition(movingObject.position);let mouseChange=p5.Vector.sub(mouse2D,configuration2D).mult(.9);let topLeft=configuration_space.graphLayout.getNode([movingObject.robotA.nodeFrom.label,movingObject.robotB.nodeFrom.label]).position;let topRight=configuration_space.graphLayout.getNode([movingObject.robotA.nodeTo.label,movingObject.robotB.nodeFrom.label]).position;let botLeft=configuration_space.graphLayout.getNode([movingObject.robotA.nodeFrom.label,movingObject.robotB.nodeTo.label]).position;let botRight=configuration_space.graphLayout.getNode([movingObject.robotA.nodeTo.label,movingObject.robotB.nodeTo.label]).position;if(flags[SHIFT]||flags[66]){if(movingObject.robotB.inANode()){let bestcandidate=pickBestCandidateForB(movingObject,mouseChange);if(bestcandidate!==undefined)movingObject.robotB.setNeighbor(bestcandidate)}else{let topX=p5.Vector.lerp(topLeft,topRight,movingObject.robotA.amount);let botX=p5.Vector.lerp(botLeft,botRight,movingObject.robotA.amount);let topX2D=graphicsForConfigurationSpace.screenPosition(topX);let botX2D=graphicsForConfigurationSpace.screenPosition(botX);let edgeBaux=p5.Vector.sub(botX2D,topX2D);let amountBchange=edgeBaux.dot(mouseChange)/pow(edgeBaux.mag(),2);movingObject.robotB.setAmount(movingObject.robotB.amount+amountBchange)}}if(flags[SHIFT]||flags[65]){if(movingObject.robotA.inANode()){let bestcandidate=pickBestCandidateForA(movingObject,mouseChange);if(bestcandidate!==undefined)movingObject.robotA.setNeighbor(bestcandidate)}else{let leftX=p5.Vector.lerp(topLeft,botLeft,movingObject.robotB.amount);let rightX=p5.Vector.lerp(topRight,botRight,movingObject.robotB.amount);let leftX2D=graphicsForConfigurationSpace.screenPosition(leftX);let rightX2D=graphicsForConfigurationSpace.screenPosition(rightX);let edgeAaux=p5.Vector.sub(rightX2D,leftX2D);let amountAchange=edgeAaux.dot(mouseChange)/pow(edgeAaux.mag(),2);movingObject.robotA.setAmount(movingObject.robotA.amount+amountAchange)}}}else{for(let node of configuration_space.graphLayout.nodes){if(node.active===true){ordinaryNodeMoving=node}}}}if(ordinaryNodeMoving!==undefined){if(verbose)console.log("moving ordinaryNodeMoving");let screenPosOfMovingNode=currentGraphics.screenPosition(ordinaryNodeMoving.position);let mouseChange=p5.Vector.sub(mouse2D,screenPosOfMovingNode);let dst=applyToVec3(cameraState.rotation,[mouseChange.x,mouseChange.y,0]);let camPos=currentGraphics.easycam.getPosition();let camPosVector=createVector(camPos[0],camPos[1],camPos[2]);let distToNode=ordinaryNodeMoving.position.dist(camPosVector);if(verbose)print(dst);let xMovement=dst[0];let yMovement=dst[1];let zMovement=dst[2];let move=createVector(xMovement,yMovement,zMovement).mult(.5*distToNode/cameraState.distance);ordinaryNodeMoving.position.add(move)}}else if(parameters.mode==="View"){if(areWeOnTheLeft){if(parameters.syncView)configuration_space.graphLayout.graphics.easycam.setState(graph.graphLayout.graphics.easycam.getState())}else{if(parameters.syncView)graph.graphLayout.graphics.easycam.setState(configuration_space.graphLayout.graphics.easycam.getState())}reheat()}}function pickBestCandidateForA(movingNode,mouseChange){let candidates=movingNode.robotA.getCandidates();let bestCandidate;let bestCandidateAngle=PI/2;for(let candidate of candidates){let topRight=configuration_space.graphLayout.getNode([candidate.label,movingNode.robotB.nodeFrom.label]).position;let botRight=configuration_space.graphLayout.getNode([candidate.label,movingNode.robotB.nodeTo.label]).position;let leftX=movingNode.position;let rightX=p5.Vector.lerp(topRight,botRight,movingNode.robotB.amount);let leftX2D=graphicsForConfigurationSpace.screenPosition(leftX);let rightX2D=graphicsForConfigurationSpace.screenPosition(rightX);let screenDiff=p5.Vector.sub(rightX2D,leftX2D);let screenDiffAngle=abs(mouseChange.angleBetween(screenDiff));if(screenDiffAngle<bestCandidateAngle){bestCandidate=candidate;bestCandidateAngle=screenDiffAngle}}return bestCandidate}function pickBestCandidateForB(movingNode,mouseChange){let candidates=movingNode.robotB.getCandidates();let bestCandidate;let bestCandidateAngle=PI/2;for(let candidate of candidates){let botLeft=configuration_space.graphLayout.getNode([movingNode.robotA.nodeFrom.label,candidate.label]).position;let botRight=configuration_space.graphLayout.getNode([movingNode.robotA.nodeTo.label,candidate.label]).position;let topX=movingNode.position;let botX=p5.Vector.lerp(botLeft,botRight,movingNode.robotA.amount);let topX2D=graphicsForConfigurationSpace.screenPosition(topX);let botX2D=graphicsForConfigurationSpace.screenPosition(botX);let screenDiff=p5.Vector.sub(botX2D,topX2D);let screenDiffAngle=abs(mouseChange.angleBetween(screenDiff));if(screenDiffAngle<bestCandidateAngle){bestCandidate=candidate;bestCandidateAngle=screenDiffAngle}}return bestCandidate}function mouseReleased(){configuration_space.graphLayout.configuration.active=false;for(let node of configuration_space.graphLayout.nodes){node.active=false}graph.robotA.active=false;graph.robotB.active=false;for(let node of graph.graphLayout.nodes){node.active=false}if(!(key==="a"||key==="b")){for(let edge of graph.graphLayout.edges){edge.candidateForRobot=undefined}}}function easyCamOff(){easyCamActive=false;if(verbose)print("easyCamOff");graphicsForConfigurationSpace.easycam.removeMouseListeners();graphicsForGraph.easycam.removeMouseListeners();forcesActive=false;configuration_space.graphLayout.moveToCenter=false;graph.graphLayout.moveToCenter=false}function easyCamOn(){easyCamActive=true;if(verbose)print("easyCamOn");graphicsForConfigurationSpace.easycam.attachMouseListeners(graphicsForConfigurationSpace._renderer);graphicsForGraph.easycam.attachMouseListeners(graphicsForGraph._renderer);forcesActive=true;configuration_space.graphLayout.moveToCenter=true;graph.graphLayout.moveToCenter=true}let flags={};function downKey(c){return flags[c.charCodeAt(0)]}function keyPressed(){flags[keyCode]=true;if(keyCode===SHIFT||key==="a"||key==="b"){parameters.mode="Move";updateMode()}if(key==="a"&&!downKey("B")||key==="b"&&!downKey("A")){let activeRobot=key==="a"?graph.robotA:graph.robotB;let possibleEdges=activeRobot.getAllPossibleEdges();for(let possibleEdge of possibleEdges){graph.graphLayout.getEdge(possibleEdge[0],possibleEdge[1]).candidateForRobot=activeRobot.index}}if(key==="R")init();else if(key==="e"){parameters.mode="Edit";updateMode()}else if(key===" ")running=!running;else if(key==="f")forcesActive=!forcesActive;else if(key==="t")parameters.showText=!parameters.showText;else if(key==="v")toggleView();else if(key==="g")toggleGUI(-1);else if(key==="0")toggleGUI(0);else if(key==="1")toggleGUI(1);else if(key==="2")toggleGUI(2);else if(key==="3")toggleGUI(3);else if(key==="n")addNode();else if(key==="d")deleteNodeMode=!deleteNodeMode;else if(key==="a")robotAmoving=!robotAmoving;else if(key==="b")robotBmoving=!robotBmoving;else if(key==="c")toggleForSelectedNode();else if(key==="s")takeScreenshotGraph=!takeScreenshotGraph;else if(key==="S")takeScreenshotConfigSpace=!takeScreenshotConfigSpace;else if(key==="w")writeToFile();else if(key==="r")readFromFile("graph.txt");else if(key==="m"){graphicsForConfigurationSpace.easycam.removeMouseListeners();graphicsForGraph.easycam.removeMouseListeners()}else if(key==="M"){graphicsForConfigurationSpace.easycam.attachMouseListeners(graphicsForConfigurationSpace._renderer);graphicsForGraph.easycam.attachMouseListeners(graphicsForGraph._renderer)}}function keyReleased(){flags[keyCode]=false;if(keyCode===SHIFT||key==="a"||key==="b"){parameters.mode="View";updateMode()}if(!downKey("A")&&!downKey("B")){for(let edge of graph.graphLayout.edges){edge.candidateForRobot=undefined}}}function applyToVec3(rot,vec){let dst;var[x,y,z]=vec;var[q0,q1,q2,q3]=rot;var s=q1*x+q2*y+q3*z;dst=[0,0,0];dst[0]=2*(q0*(x*q0-(q2*z-q3*y))+s*q1)-x;dst[1]=2*(q0*(y*q0-(q3*x-q1*z))+s*q2)-y;dst[2]=2*(q0*(z*q0-(q1*y-q2*x))+s*q3)-z;return dst}function limitVector(p,value){if(p.mag()>value){p.normalize().mult(value)}}function EulerToQuaternion(x,y,z){var cy=cos(z*.5);var sy=sin(z*.5);var cp=cos(y*.5);var sp=sin(y*.5);var cr=cos(x*.5);var sr=sin(x*.5);var qw=cy*cp*cr+sy*sp*sr;var qx=cy*cp*sr-sy*sp*cr;var qy=sy*cp*sr+cy*sp*cr;var qz=sy*cp*cr-cy*sp*sr;return[qw,qx,qy,qz]}function QuaternionToEuler(q0,q1,q2,q3){var sinr_cosp=+2*(q0*q1+q2*q3);var cosr_cosp=+1-2*(q1*q1+q2*q2);var x=atan2(sinr_cosp,cosr_cosp);var sinp=+2*(q0*q2-q3*q1);var y;if(abs(sinp)>=1)y=copysign(M_PI/2,sinp);else y=asin(sinp);var siny_cosp=+2*(q0*q3+q1*q2);var cosy_cosp=+1-2*(q2*q2+q3*q3);var z=atan2(siny_cosp,cosy_cosp);return[x,y,z]}function cartesianProductOf(){return Array.prototype.reduce.call(arguments,(function(a,b){var ret=[];a.forEach((function(a){b.forEach((function(b){ret.push(a.concat([b]))}))}));return ret}),[[]])}function labelToString(L){let result="";if(Array.isArray(L)){for(let l of L){result+=l+" "}result=result.slice(0,-1);return result}else{return L}}function checkIfArrayIsUnique(myArray){return myArray.length===new Set(myArray).size}const flatten=arr=>[].concat.apply([],arr);const product=(...sets)=>sets.reduce(((acc,set)=>flatten(acc.map((x=>set.map((y=>[...x,y])))))),[[]]);function arraysEqual(a1,a2){return JSON.stringify(a1)==JSON.stringify(a2)}function edgesContainEdge(edges,edge){for(let cand of edges){if(arraysEqual(cand,edge))return true;if(arraysEqual(cand,[edge[1],edge[0]]))return true}return false}function is_state(p){return checkIfArrayIsUnique(p.flat())}function toggleForSelectedNode(){console.log("toggleForSelectedNode");for(let node of graph.graphLayout.nodes){if(node.lastSelected===true){node.applyExtraCenterForce=!node.applyExtraCenterForce;if(!verbose)print(node.applyExtraCenterForce)}}for(let node of configuration_space.graphLayout.nodes){if(node.lastSelected===true){node.applyExtraCenterForce=!node.applyExtraCenterForce;if(!verbose)print(node.applyExtraCenterForce)}}}function toggleGUI(type){if(type===-1){if(gui.closed===true){gui.open()}else{gui.close()}}}function updateURL(){if(verbose)console.log("updateURL");if(verbose)console.log(history.pushState);if(history.pushState){let newurl=window.location.protocol+"//"+window.location.host+window.location.pathname+"?"+(parameters.graphType==="custom"?"graph=custom"+"&"+"nodes="+graph.nodes+"&"+"edges="+edgesToString(graph.edges):"graph="+parameters.graphType)+"&"+"view="+viewingStyle+"&"+"showgraph="+parameters.showGraph+"&"+"showconfigspace="+parameters.showConfigurationspace+"&"+"showrobots="+parameters.showRobots;window.history.pushState({path:newurl},"",newurl);if(verbose)console.log(newurl)}}function edgesToString(edges){let result="";for(let edge of edges){result+="["+edge+"],"}result=result.substr(0,result.length-1);return result}function setParametersFromURL(){if(verbose)console.log("setParametersFromURL");let str=getURL();let nodes,edges,graph;let edgesFromUrl=[];let parts=split(str,"?");if(parts.length!==2)return;let inputString=parts[1];let urlParameters={};for(let p of split(inputString,"&")){let parts=split(p,"=");urlParameters[parts[0]]=parts[1]}let viewStr=urlParameters["view"];if(viewStr==="single"){viewingStyle="single"}else if(viewStr==="dual"){viewingStyle="dual"}let showGraphStr=urlParameters["showgraph"];parameters.showGraph=showGraphStr!=="false";let showConfigStr=urlParameters["showconfigspace"];parameters.showConfigurationspace=showConfigStr!=="false";let showRobotsStr=urlParameters["showrobots"];parameters.showRobots=showRobotsStr!=="false";let graphStr=urlParameters["graph"];if(graphStr!==undefined&&graphStr!=="custom"){parameters.graphType=graphStr}else{let nodesStr=urlParameters["nodes"];if(nodesStr===undefined)return;nodes=nodesStr.split(",").map(Number);for(let n of nodes){if(isNaN(n))return}let edgesStr=urlParameters["edges"];if(verbose)console.log(edgesStr);if(edgesStr!==null)edgesStr=decodeURIComponent(edgesStr);if(verbose)console.log(edgesStr);if(edgesStr!==undefined&&edgesStr.charAt(0)=="["&&edgesStr.charAt(edgesStr.length-1)=="]"){if(verbose)console.log("🎉 success []");edgesStr=edgesStr.slice(1,-1);edgesFromUrl=edgesStr.split(/[^\d],[^\d]/).map((s=>s.split(",").map(Number)))}edges=[];for(let edge of edgesFromUrl){if(edge.length===2&&nodes.includes(edge[0])&&nodes.includes(edge[1])&&edge[0]!==edge[1]&&!edgesContainEdge(edges,edge)){edges.push(edge)}}if(nodes!==undefined){customGraph={};customGraph.nodes=nodes;customGraph.edges=edges;parameters.graphType="custom"}}}function updateInfoString(){infoStrings=[];infoStrings.push("Graph = "+parameters.graphType);infoStrings.push("Nodes = "+JSON.stringify(graph.nodes));infoStrings.push("Edges = "+JSON.stringify(graph.edges));let nodesWithExtraCenterForce=[];for(let node of graph.graphLayout.nodes){if(node.applyExtraCenterForce){nodesWithExtraCenterForce.push(node.label)}}infoStrings.push("Graph nodes with extra center force = "+JSON.stringify(nodesWithExtraCenterForce));let state=graphicsForConfigurationSpace.easycam.getState();infoStrings.push("Camera state = "+JSON.stringify(state));let globalParameters={};globalParameters["mode"]=parameters.mode;globalParameters["showGraph"]=parameters.showGraph;globalParameters["showConfigurationspace"]=parameters.showConfigurationspace;globalParameters["showRobots"]=parameters.showRobots;globalParameters["syncView"]=parameters.syncView;globalParameters["distinguishDots"]=parameters.distinguishDots;globalParameters["gridOn"]=parameters.gridOn;globalParameters["squareOn"]=parameters.squareOn;globalParameters["showHyperplanes"]=parameters.showHyperplanes;globalParameters["granularityFirstCoordinate"]=parameters.granularityFirstCoordinate;globalParameters["granularitySecondCoordinate"]=parameters.granularitySecondCoordinate;globalParameters["showText"]=parameters.showText;globalParameters["sphereView"]=parameters.sphereView;globalParameters["lights"]=parameters.lights;globalParameters["moveDotsRandomly"]=parameters.moveDotsRandomly;globalParameters["robotASpeed"]=parameters.robotASpeed;globalParameters["robotBSpeed"]=parameters.robotBSpeed;globalParameters["amountMultiplier"]=parameters.amountMultiplier;globalParameters["recordHistory"]=parameters.recordHistory;globalParameters["showHistory"]=parameters.showHistory;globalParameters["sphereDetail"]=parameters.sphereDetail;globalParameters["speedUp"]=parameters.speedUp;globalParameters["labelX"]=parameters.labelX;globalParameters["labelY"]=parameters.labelY;globalParameters["labelZ"]=parameters.labelZ;globalParameters["colorRobotA"]=parameters.colorRobotA;globalParameters["colorRobotB"]=parameters.colorRobotB;globalParameters["colorConfig"]=parameters.colorConfig;globalParameters["colorNode"]=parameters.colorNode;globalParameters["colorGraphEdge"]=parameters.colorGraphEdge;globalParameters["squareColor"]=parameters.squareColor;globalParameters["squareOpacity"]=parameters.squareOpacity;globalParameters["activeDotColor"]=parameters.activeDotColor;globalParameters["deleteNodeColor"]=parameters.deleteNodeColor;globalParameters["selectedNodeForEdgeColor"]=parameters.selectedNodeForEdgeColor;globalParameters["nodeSize"]=parameters.nodeSize;globalParameters["robotsNodeSize"]=parameters.robotsNodeSize;globalParameters["configNodeSize"]=parameters.configNodeSize;globalParameters["edgeWidthGraph"]=parameters.edgeWidthGraph;globalParameters["edgeWidthConfigSpace"]=parameters.edgeWidthConfigSpace;globalParameters["edgeWidthGrid"]=parameters.edgeWidthGrid;infoStrings.push("Parameters = "+JSON.stringify(globalParameters));let graphParameters={};graphParameters["edgelength"]=graph.graphLayout.edgelength;graphParameters["maxspeed"]=graph.graphLayout.maxspeed;graphParameters["cohesionthreshold"]=graph.graphLayout.cohesionthreshold;graphParameters["repulsion"]=graph.graphLayout.repulsion;graphParameters["separationFactor"]=graph.graphLayout.separationFactor;graphParameters["planarForce"]=graph.graphLayout.planarForce;graphParameters["centerForce"]=graph.graphLayout.centerForce;graphParameters["extraCenterForce"]=graph.graphLayout.extraCenterForce;graphParameters["moveToCenter"]=graph.graphLayout.moveToCenter;infoStrings.push("Graph parameters = "+JSON.stringify(graphParameters));let configSpaceParameters={};configSpaceParameters["firstCoordinateEdgeLength"]=configuration_space.graphLayout.firstCoordinateEdgeLength;configSpaceParameters["firstCoordinateForce"]=configuration_space.graphLayout.firstCoordinateForce;configSpaceParameters["secondCoordinateEdgeLength"]=configuration_space.graphLayout.secondCoordinateEdgeLength;configSpaceParameters["secondCoordinateForce"]=configuration_space.graphLayout.secondCoordinateForce;configSpaceParameters["firstCoordinateMirrorEdgeLength"]=configuration_space.graphLayout.firstCoordinateMirrorEdgeLength;configSpaceParameters["firstCoordinateMirrorForce"]=configuration_space.graphLayout.firstCoordinateMirrorForce;configSpaceParameters["secondCoordinateMirrorEdgeLength"]=configuration_space.graphLayout.secondCoordinateMirrorEdgeLength;configSpaceParameters["secondCoordinateMirrorForce"]=configuration_space.graphLayout.secondCoordinateMirrorForce;configSpaceParameters["coordinatePreference"]=configuration_space.graphLayout.coordinatePreference;configSpaceParameters["extraCenterPreference"]=configuration_space.graphLayout.extraCenterPreference;configSpaceParameters["maxspeed"]=configuration_space.graphLayout.maxspeed;configSpaceParameters["cohesionthreshold"]=configuration_space.graphLayout.cohesionthreshold;configSpaceParameters["repulsion"]=configuration_space.graphLayout.repulsion;configSpaceParameters["separationFactor"]=configuration_space.graphLayout.separationFactor;configSpaceParameters["centerForce"]=configuration_space.graphLayout.centerForce;configSpaceParameters["extraCenterForce"]=configuration_space.graphLayout.extraCenterForce;configSpaceParameters["moveToCenter"]=configuration_space.graphLayout.moveToCenter;infoStrings.push("Configuration space parameters = "+JSON.stringify(configSpaceParameters));for(let n of graph.nodes){infoStrings.push("Node position("+n+") = "+posToString(graph.graphLayout.getNode(n).position))}for(let n of configuration_space.graphLayout.nodes){infoStrings.push("Configuration position("+n.label+") = "+posToString(n.position))}let infoHTML="";infoHTML+="<pre>";for(let string of infoStrings){infoHTML+=string+"<br>"}infoHTML+="</pre>";infoDiv.html(infoHTML)}function writeToFile(){saveStrings(infoStrings,makeFileName("-parameters.txt"))}function readFromString(strings){let parametersFromFile={};for(let s of strings){if(s==="")continue;let parts=split(s," = ");if(parts.length!==2)continue;parametersFromFile[parts[0]]=parts[1]}parameters.graphType=parametersFromFile["Graph"];if(parameters.graphType==="custom"){customGraph={};customGraph.nodes=JSON.parse(parametersFromFile["Nodes"]);customGraph.edges=JSON.parse(parametersFromFile["Edges"])}let globalParametersString=parametersFromFile["Parameters"];let globalParameters=JSON.parse(globalParametersString);parameters.mode=globalParameters["mode"];parameters.showGraph=globalParameters["showGraph"];parameters.showConfigurationspace=globalParameters["showConfigurationspace"];parameters.showRobots=globalParameters["showRobots"];parameters.syncView=globalParameters["syncView"];parameters.distinguishDots=globalParameters["distinguishDots"];parameters.gridOn=globalParameters["gridOn"];parameters.squareOn=globalParameters["squareOn"];parameters.showHyperplanes=globalParameters["showHyperplanes"];parameters.granularityFirstCoordinate=globalParameters["granularityFirstCoordinate"];parameters.granularitySecondCoordinate=globalParameters["granularitySecondCoordinate"];parameters.showText=globalParameters["showText"];parameters.sphereView=globalParameters["sphereView"];parameters.lights=globalParameters["lights"];parameters.moveDotsRandomly=globalParameters["moveDotsRandomly"];parameters.robotASpeed=globalParameters["robotASpeed"];parameters.robotBSpeed=globalParameters["robotBSpeed"];parameters.amountMultiplier=globalParameters["amountMultiplier"];parameters.recordHistory=globalParameters["recordHistory"];parameters.showHistory=globalParameters["showHistory"];parameters.sphereDetail=globalParameters["sphereDetail"];parameters.speedUp=globalParameters["speedUp"];parameters.labelX=globalParameters["labelX"];parameters.labelY=globalParameters["labelY"];parameters.labelZ=globalParameters["labelZ"];parameters.colorRobotA=globalParameters["colorRobotA"];parameters.colorRobotB=globalParameters["colorRobotB"];parameters.colorConfig=globalParameters["colorConfig"];parameters.colorNode=globalParameters["colorNode"];parameters.colorGraphEdge=globalParameters["colorGraphEdge"];parameters.squareColor=globalParameters["squareColor"];parameters.squareOpacity=globalParameters["squareOpacity"];parameters.activeDotColor=globalParameters["activeDotColor"];parameters.deleteNodeColor=globalParameters["deleteNodeColor"];parameters.selectedNodeForEdgeColor=globalParameters["selectedNodeForEdgeColor"];parameters.nodeSize=globalParameters["nodeSize"];parameters.robotsNodeSize=globalParameters["robotsNodeSize"];parameters.configNodeSize=globalParameters["configNodeSize"];parameters.edgeWidthGraph=globalParameters["edgeWidthGraph"];parameters.edgeWidthConfigSpace=globalParameters["edgeWidthConfigSpace"];parameters.edgeWidthGrid=globalParameters["edgeWidthGrid"];init();let graphNodesWithExtraCenterForce=JSON.parse(parametersFromFile["Graph nodes with extra center force"]);for(let node of graphNodesWithExtraCenterForce){graph.graphLayout.getNode(node).applyExtraCenterForce=true}let graphParametersString=parametersFromFile["Graph parameters"];let graphParameters=JSON.parse(graphParametersString);graph.graphLayout.edgelength=graphParameters["edgelength"];graph.graphLayout.maxspeed=graphParameters["maxspeed"];graph.graphLayout.cohesionthreshold=graphParameters["cohesionthreshold"];graph.graphLayout.repulsion=graphParameters["repulsion"];graph.graphLayout.separationFactor=graphParameters["separationFactor"];graph.graphLayout.planarForce=graphParameters["planarForce"];graph.graphLayout.centerForce=graphParameters["centerForce"];graph.graphLayout.extraCenterForce=graphParameters["extraCenterForce"];graph.graphLayout.moveToCenter=graphParameters["moveToCenter"];infoStrings.push("Graph parameters = "+JSON.stringify(graphParameters));let configSpaceParametersString=parametersFromFile["Configuration space parameters"];let configSpaceParameters=JSON.parse(configSpaceParametersString);configuration_space.graphLayout.firstCoordinateEdgeLength=configSpaceParameters["firstCoordinateEdgeLength"];configuration_space.graphLayout.firstCoordinateForce=configSpaceParameters["firstCoordinateForce"];configuration_space.graphLayout.secondCoordinateEdgeLength=configSpaceParameters["secondCoordinateEdgeLength"];configuration_space.graphLayout.secondCoordinateForce=configSpaceParameters["secondCoordinateForce"];configuration_space.graphLayout.firstCoordinateMirrorEdgeLength=configSpaceParameters["firstCoordinateMirrorEdgeLength"];configuration_space.graphLayout.firstCoordinateMirrorForce=configSpaceParameters["firstCoordinateMirrorForce"];configuration_space.graphLayout.secondCoordinateMirrorEdgeLength=configSpaceParameters["secondCoordinateMirrorEdgeLength"];configuration_space.graphLayout.secondCoordinateMirrorForce=configSpaceParameters["secondCoordinateMirrorForce"];configuration_space.graphLayout.coordinatePreference=configSpaceParameters["coordinatePreference"];configuration_space.graphLayout.extraCenterPreference=configSpaceParameters["extraCenterPreference"];configuration_space.graphLayout.maxspeed=configSpaceParameters["maxspeed"];configuration_space.graphLayout.cohesionthreshold=configSpaceParameters["cohesionthreshold"];configuration_space.graphLayout.repulsion=configSpaceParameters["repulsion"];configuration_space.graphLayout.separationFactor=configSpaceParameters["separationFactor"];configuration_space.graphLayout.centerForce=configSpaceParameters["centerForce"];configuration_space.graphLayout.extraCenterForce=configSpaceParameters["extraCenterForce"];configuration_space.graphLayout.moveToCenter=configSpaceParameters["moveToCenter"];infoStrings.push("Configuration space parameters = "+JSON.stringify(configSpaceParameters));initGUI();for(let n of graph.nodes){let node=graph.graphLayout.getNode(n);let coordinates=parametersFromFile["Node position("+n+")"];if(coordinates!==undefined&&coordinates.charAt(0)=="["&&coordinates.charAt(coordinates.length-1)=="]"){coordinates=coordinates.slice(1,-1);coordinates=coordinates.split(",").map(Number)}console.log(coordinates);node.position=createVector(coordinates[0],coordinates[1],coordinates[2])}for(let node of configuration_space.graphLayout.nodes){let coordinates=parametersFromFile["Configuration position("+node.label[0]+","+node.label[1]+")"];if(coordinates!==undefined&&coordinates.charAt(0)=="["&&coordinates.charAt(coordinates.length-1)=="]"){coordinates=coordinates.slice(1,-1);coordinates=coordinates.split(",").map(Number)}console.log(coordinates);node.position=createVector(coordinates[0],coordinates[1],coordinates[2])}let cameraStateString=parametersFromFile["Camera state"];graphicsForConfigurationSpace.easycam.setState(JSON.parse(cameraStateString));parameters.mode="Move";updateMode()}function readFromFile(fileName){loadStrings(fileName,readFromString)}function posToString(pos){return"["+pos.x+","+pos.y+","+pos.z+"]"}function handleFile(file){let str=file.data;let strings=str.split("\n");readFromString(strings)}