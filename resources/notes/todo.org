
“Visualization of Discretized Configuration Spaces for Particles on a Graph”

NOW
------------------------------------

* Clean up exisisting code and gui

* Pop-up info for buttons on left

* Clean up the menus
** Figure out what parameters should persist when various changes are made (change graph, toggle item)

* Create “unordered” version where 01 = 10, etc.
 
* Set up GitHub for the project

* Make it a web page
** Make about section
** Make a comment function

SOON
------------------------------------

* Make a timeline function - go back to a previous state in a non-violent way (dampen the forces)
** Make “construct graph" function

* How to make a game out if (question to student)

LATER
------------------------------------

* inner nodes
** inner squares for rendering squares better
** repulsion for making squares non-overlapping

* try THREE.js
** start with super simple graph + layout

* incorporate homology calculation
** export specification of config space
** add info about structure (other people involved)

* more robots?


MAYBE
------------------------------------

* code-clean-up: remove 2D stuff
** while cleaning up: think about generalizations

* fix mouseReleased outside of canvas
** create issue on easycam github

* better layout: create forces from grid squares for better layout
** check it for K5

* add neighborhood forces for better layouts of certain graphs

* create animations / movies / GIFs
** animation with random movement
** animation to show Euler path in graph?
** P5: Figure out how to make movies (just google it)
** specify movement of nodes by a sequence of states
*** Start: Red: node 1, Black: node 1
*** Sequence of edges determine movement
*** Granularity thing: How many images per edge?

* give things better names
  - firstcoordinate
  - coh2

* make more efficient, but how?

DONE
------------------------------------

* make more robust: read edges from URL

* interactivity: create graphs
** upload specification like [[1,2,3],[[1,2],[1,3]]]

* when graph is changed: remove preset graph type to “custom”

* add invisible copy of left graph in config space and attract based on one coordinate
* color edges with candidate info
* color configuration space edges when robots are moved
* mark squares better (grid view)
* discern types of edges in config space: pair-singleton OR singleton-pair
* center the graphs (not with force)
* catalog of nice graphs
* fix the font
* make sure red dot matches red edge, resp.
* cooling down and heating up when changes happen
* make the config space look better

* interactivity: user move robots/configuration around
** let SHIFT key toggle easycam OFF (then ON when released)
** do the graph side
** identify robot when clicking
** move robot along edge, then calculate configuration accordingly
** move robots from node onto edge
** move configuration, then calculate robots
* interactivity: on the robot side for graph layout
** enable user to move nodes freely around while the rest is frozen

* FIX gui and interaction overlapping
  (when in edit mode and gui is used, a node is added — fix this)
  Not a problem in view mode.
  Perhaps there is a way to listen THROUGH easycam?
  (https://github.com/freshfork/p5.EasyCam)

* interactivity: modify graphs
** add / delete nodes and edges
** add option to DELETE edges
** then update config space without resetting it

* make graph hideable when drawn together with config space

* have a version online before 2021

* make switches between modes more automatically

* Light/dark mode
